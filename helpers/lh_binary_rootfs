#!/bin/sh

# lh_binary_rootfs(1) - build rootfs image
# Copyright (C) 2006-2008 Daniel Baumann <daniel@debian.org>
#
# live-helper comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.

set -e

# Including common functions
LH_BASE="${LH_BASE:-/usr/share/live-helper}"

for FUNCTION in "${LH_BASE}"/functions/*.sh
do
	. "${FUNCTION}"
done

# Setting static variables
DESCRIPTION="build rootfs image"
HELP=""
USAGE="${PROGRAM} [--force]"

Arguments "${@}"

# Reading configuration files
Read_conffile config/all config/common config/bootstrap config/chroot config/binary config/source
Set_defaults

Echo_message "Begin building root filesystem image..."

# Requiring stage file
Require_stagefile .stage/bootstrap
Require_stagefile .stage/binary_chroot

# Checking stage file
Check_stagefile .stage/binary_rootfs

# Checking lock file
Check_lockfile .lock

# Creating lock file
Create_lockfile .lock

case "${LH_ARCHITECTURE}" in
	amd64|i386)
		LINUX="vmlinuz"
		;;

	powerpc)
		LINUX="vmlinux"
		;;
esac

case "${LH_INITRAMFS}" in
	casper)
		INITFS="casper"
		;;

	live-initramfs)
		INITFS="live"
		;;
esac

# Creating directory
mkdir -p binary/${INITFS}

for STAGE in ${LH_CACHE_STAGES}
do
	if [ "${STAGE}" = "rootfs" ] && [ -d cache/stages_rootfs ]
	then
		# Removing old chroot
		rm -rf binary/"${INITFS}"/filesystem.*

		# Restoring old cache
		mkdir -p binary/"${INITFS}"
		${LH_ROOT_COMMAND} cp -a cache/stages_rootfs/filesystem.* binary/"${INITFS}"

		if [ -n "${LH_ROOT_COMMAND}" ]
		then
			${LH_ROOT_COMMAND} chown -R $(whoami):$(whoami) binary
		fi

		# Creating stage file
		Create_stagefile .stage/binary_rootfs
		exit 0
	fi
done

# Handling chroot excludes
if [ "${LH_CHROOT_BUILD}" = "enabled" ]
then
	if [ -f config/binary_rootfs/excludes ]
	then
		cp config/binary_rootfs/excludes chroot/chroot/excludes
		Chroot chroot/chroot "cat /excludes | xargs rm -rf"
		rm -f chroot/chroot/excludes
	fi

	if [ "${LH_DEBIAN_INSTALLER}" != "live" ]
	then
		case "${LH_PACKAGES_LISTS}" in
			stripped|minimal)
				# kernel images
				rm -f chroot/chroot/boot/${LINUX}*
				rm -f chroot/chroot/boot/initrd.img*

				# kernel symlinks
				rm -f chroot/chroot/${LINUX}*
				rm -f chroot/chroot/initrd.img*
				;;
		esac
	fi
else
	if [ "${LH_CHROOT_FILESYSTEM}" != "squashfs" ]
	then
		Echo_warning "rootfs excludes are not supported on non-chrooted builds unless squashfs as chroot filesystem is used, thus ignoring excludes now."
	fi
fi

case "${LH_CHROOT_FILESYSTEM}" in
	ext2|ext3)
		# Checking depends
		Check_package chroot/usr/bin/genext2fs genext2fs

		# Restoring cache
		Restore_cache cache/packages_binary

		# Installing depends
		Install_package

		# Remove old image
		if [ -f binary/${INITFS}/filesystem.${LH_CHROOT_FILESYSTEM} ]
		then
			rm -f binary/${INITFS}/filesystem.${LH_CHROOT_FILESYSTEM}
		fi

		DU_DIM="$(du -ks chroot/chroot | cut -f1)"
		REAL_DIM="$(expr ${DU_DIM} + ${DU_DIM} / 20)" # Just 5% more to be sure, need something more sophistcated here...
		if [ "${LH_DISTRIBUTION}" = "etch" ]
		then
			RESERVED_PERCENTAGE="--reserved-blocks"
		else
			RESERVED_PERCENTAGE="--reserved-percentage"
		fi

		case "${LH_CHROOT_BUILD}" in
			enabled)
				Chroot "genext2fs --size-in-blocks=${REAL_DIM} ${RESERVED_PERCENTAGE}=0 --root=chroot filesystem.${LH_CHROOT_FILESYSTEM}"

				# Move image
				mv chroot/filesystem.${LH_CHROOT_FILESYSTEM} binary/${INITFS}
				rm -rf chroot/chroot
				;;

			disabled)
				genext2fs --size-in-blocks=${REAL_DIM} ${RESERVED_PERCENTAGE}=0 --root=chroot binary/${INITFS}/filesystem.${LH_CHROOT_FILESYSTEM}
				;;
		esac

		# Saving cache
		Save_cache cache/packages_binary

		# Removing depends
		Remove_package
		;;

	jffs2)
		# Checking depends
		Check_package chroot/usr/sbin/mkfs.jffs2 mtd-tools

		# Restoring cache
		Restore_cache cache/packages_binary

		# Installing depends
		Install_package

		# Remove old jffs2 image
		if [ -f binary/${INITFS}/filesystem.jffs2 ]
		then
			rm -f binary/${INITFS}/filesystem.jffs2
		fi

		if [ -n "${LH_JFFS2_ERASEBLOCK}" ]
		then
			JFFS2_OPTIONS="--eraseblock=${LH_JFFS2_ERASEBLOCK}"
		fi

		case "${LH_CHROOT_BUILD}" in
			enabled)
				Chroot "mkfs.jffs2 ${JFFS2_OPTIONS} --root=chroot --output filesystem.jffs2"

				# Move image
				mv chroot/filesystem.jffs2 binary/${INITFS}
				rm -rf chroot/chroot
				;;

			disabled)
				mkfs.jffs2 ${JFFS2_OPTIONS} --root=chroot --output binary/${INITFS}/filesystem.jffs2
				;;
		esac

		# Saving cache
		Save_cache cache/packages_binary

		# Removing depends
		Remove_package
		;;

	plain)
		if [ -d binary/${INITFS}/filesystem.dir ]
		then
			rm -rf binary/${INITFS}/filesystem.dir
		fi

		case "${LH_CHROOT_BUILD}" in
			enabled)
				mv chroot/chroot binary/${INITFS}/filesystem.dir
				;;

			disabled)
				cp -a chroot binary/${INITFS}/filesystem.dir
				;;
		esac
		;;

	squashfs)
		# Checking depends
		Check_package chroot/usr/share/doc/squashfs-tools squashfs-tools

		# Restoring cache
		Restore_cache cache/packages_binary

		# Installing depends
		Install_package

		# Remove old squashfs image
		if [ -f binary/${INITFS}/filesystem.squashfs ]
		then
			rm -f binary/${INITFS}/filesystem.squashfs
		fi

		# Remove stale squashfs image
		rm -f chroot/filesystem.squashfs

		if [ "${LH_QUIET}" = "enabled" ] && [ "${LH_DISTRIBUTION}" != "etch" ] && [ "${LH_DISTRIBUTION}" != "testing" ]
		then
			MKSQUASHFS_OPTIONS="${MKSQUASHFS_OPTIONS} -no-progress"
		fi

		if [ "${LH_VERBOSE}" = "enabled" ]
		then
			MKSQUASHFS_OPTIONS="${MKSQUASHFS_OPTIONS} -info"
		fi

		if [ -f config/binary_rootfs/squashfs.sort ]
		then
			MKSQUASHFS_OPTIONS="${MKSQUASHFS_OPTIONS} -sort squashfs.sort"
			cp config/binary_rootfs/squashfs.sort chroot #FIXME
		fi

		case "${LH_CHROOT_BUILD}" in
			enabled)
				# Create image
				Chroot "mksquashfs chroot filesystem.squashfs ${MKSQUASHFS_OPTIONS}"

				# Move image
				${LH_ROOT_COMMAND} mv chroot/filesystem.squashfs binary/${INITFS}
				${LH_ROOT_COMMAND} rm -rf chroot/chroot chroot/squashfs.sort
				;;

			disabled)
				if [ -f config/binary_rootfs/excludes ]
				then
					MKSQUASHFS_OPTIONS="${MKSQUASHFS_OPTIONS} -ef config/binary_rootfs/excludes"
				fi

				mksquashfs chroot binary/${INITFS}/filesystem.squashfs ${MKSQUASHFS_OPTIONS}
				;;
		esac

		if [ -n "${LH_ROOT_COMMAND}" ]
		then
			${LH_ROOT_COMMAND} chown -R $(whoami):$(whoami) binary/${INITFS}
		fi

		# Saving cache
		Save_cache cache/packages_binary

		# Removing depends
		Remove_package
		;;
esac

for STAGE in ${LH_CACHE_STAGES}
do
	if [ "${STAGE}" = "rootfs" ]
	then
		rm -rf cache/stages_rootfs

		mkdir -p cache/stages_rootfs

		${LH_ROOT_COMMAND} cp -a binary/"${INITFS}"/filesystem.* cache/stages_rootfs

		if [ -n "${LH_ROOT_COMMAND}" ]
		then
			${LH_ROOT_COMMAND} chown -R $(whoami):$(whoami) cache/stages_rootfs
		fi
	fi
done

# Creating stage file
Create_stagefile .stage/binary_rootfs
